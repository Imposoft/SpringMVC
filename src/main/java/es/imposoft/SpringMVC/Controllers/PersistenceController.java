package es.imposoft.SpringMVC.Controllers;

import es.imposoft.SpringMVC.Logic.Converter.ConvertUtil;
import es.imposoft.SpringMVC.Models.Greeting;
import es.imposoft.SpringMVC.Entities.Menu;
import es.imposoft.SpringMVC.Models.MenuDTO;
import es.imposoft.SpringMVC.Persistence.MenuRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.atomic.AtomicLong;

@RestController
public class PersistenceController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private MenuRepository menuRepository;

    @GetMapping("/testMenu")
    public Menu testMenu() {
        return new Menu("texto");
    }

    @CrossOrigin
    @GetMapping("/loadMenu")
    public MenuDTO loadMenu(@RequestParam int id) {
        MenuDTO menuToReturn = null;
        try{
            Menu menu = menuRepository.findMenuById(id);
            menuToReturn = convertToDTO(menu);
            System.out.println("loadMenu: Se ha enviado un menus");
        } catch (Exception e){
            System.out.println("loadMenu: El id no existe en la base de datos");
        }
        return menuToReturn;
    }

    @GetMapping("/loadMenus")
    public List<MenuDTO> loadMenus() {
        List<MenuDTO> menusToReturn = new ArrayList<>();
        try {
            List<Menu> menus = menuRepository.findAll();
            for (Menu menu:menus) {
                menusToReturn.add(convertToDTO(menu));
            }
            System.out.println("loadMenus: Se han enviado todos los menus");
        } catch (Exception e){
            System.out.println("loadMenus: Error al enviar los menus");
        }
        return menusToReturn;
    }

    @PostMapping(value = "/createMenu", consumes = "application/json", produces = "application/json")
    public MenuDTO createMenu(@RequestBody MenuDTO newMenu) {
        System.out.println("createMenu: Se ha recibido un menu" + newMenu.getName());
        menuRepository.save(convertToEntity(newMenu));
        return newMenu;
    }

    @PostMapping(value = "/createMenus", consumes = "application/json", produces = "application/json")
    public List<MenuDTO> createMenu(@RequestBody List<MenuDTO> newMenus) {
        System.out.println("createMenus: Se ha recibido una lista de menus");
        for (MenuDTO menuToAdd: newMenus) {
            menuRepository.save(convertToEntity(menuToAdd));
        }
        return newMenus;
    }

    @RequestMapping("/deleteMenu")
    public void deleteMenu(@RequestParam int id) {
        if(menuRepository.existsById(id)){
            menuRepository.deleteById(id);
            System.out.println("deleteMenu: Se ha borrado el menu con exito");
        } else {
            System.out.println("deleteMenu: No se ha podido encontrar el menu");
        }

    }
        
    private MenuDTO convertToDTO(Menu menu){
        MenuDTO menuDTO = ConvertUtil.convertMenuDTO(menu);
        return menuDTO;
    }

    private Menu convertToEntity(MenuDTO postDto) {
        Menu menu = ConvertUtil.convertDTOtoMenu(postDto);
        return menu;
    }
}
